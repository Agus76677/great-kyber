stages:
  - build
  - test
  - quality

variables:
  DEBIAN_FRONTEND: noninteractive
  BASE_IMAGE_VERSION: "1.0.0"
  BUILD_ROOT: "$CI_PROJECT_DIR/build"
  INSTALL_DIR: "$CI_PROJECT_DIR/install"
  BUILD_TYPE: "Release"

  # CMake customization args
  clang_format_ARGS: "-DCLANG_FORMAT=clang-format-18"
  clang_tidy_ARGS: "-DENABLE_CLANG_TIDY=ON"
  asan_ARGS:  "-DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DHQC_SANITIZER=ASAN"
  lsan_ARGS:  "-DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DHQC_SANITIZER=LSAN"
  msan_ARGS:  "-DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DHQC_SANITIZER=MSAN"
  ubsan_ARGS: "-DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DHQC_SANITIZER=UBSAN"
  ref_ARGS:   "-DHQC_ARCH=ref"
  x86_64_ARGS: "-DHQC_ARCH=x86_64"

  # Number of iterations for functional KEM tests
  REF_ITERATIONS:   "100"
  X86_64_ITERATIONS: "1000"

# -------------------------------------------------------------------
# Build template
# -------------------------------------------------------------------
.build: &build_definition
  stage: build
  image: tiicrc/pqc-base:latest
  script: |
    mkdir -p "$BUILD_DIR"
    cmake \
      -S "$CI_PROJECT_DIR" \
      -B "$BUILD_DIR" \
      -G "Unix Makefiles" \
      -DCMAKE_BUILD_TYPE="$BUILD_TYPE" \
      $CMAKE_ARGS
    cmake --build "$BUILD_DIR" -- -j$(nproc)
  artifacts:
    paths:
      - "$BUILD_DIR/"

# -------------------------------------------------------------------
# Build jobs
# -------------------------------------------------------------------
build:ref:
  <<: *build_definition
  variables:
    BUILD_DIR: "${BUILD_ROOT}/ref"
    CMAKE_ARGS: "${ref_ARGS} ${clang_format_ARGS} -DCLANG_FORMAT_ARCH=ref"

build:x86_64:
  <<: *build_definition
  variables:
    BUILD_DIR: "${BUILD_ROOT}/x86_64"
    CMAKE_ARGS: "${x86_64_ARGS} -DHQC_X86_IMPL=avx256 ${clang_format_ARGS} -DCLANG_FORMAT_ARCH=x86_64"

build:ref:asan:
  <<: *build_definition
  variables:
    BUILD_DIR: "${BUILD_ROOT}/ref_asan"
    CMAKE_ARGS: "${ref_ARGS} ${asan_ARGS}"

build:x86_64:asan:
  <<: *build_definition
  variables:
    BUILD_DIR: "${BUILD_ROOT}/x86_64_asan"
    CMAKE_ARGS: "${x86_64_ARGS} -DHQC_X86_IMPL=avx256 ${asan_ARGS}"

build:ref:msan:
  <<: *build_definition
  variables:
    BUILD_DIR: "${BUILD_ROOT}/ref_msan"
    CMAKE_ARGS: "${ref_ARGS} ${msan_ARGS}"

build:x86_64:msan:
  <<: *build_definition
  variables:
    BUILD_DIR: "${BUILD_ROOT}/x86_64_msan"
    CMAKE_ARGS: "${x86_64_ARGS} -DHQC_X86_IMPL=avx256 ${msan_ARGS}"

build:ref:lsan:
  <<: *build_definition
  variables:
    BUILD_DIR: "${BUILD_ROOT}/ref_lsan"
    CMAKE_ARGS: "${ref_ARGS} ${lsan_ARGS}"

build:x86_64:lsan:
  <<: *build_definition
  variables:
    BUILD_DIR: "${BUILD_ROOT}/x86_64_lsan"
    CMAKE_ARGS: "${x86_64_ARGS} -DHQC_X86_IMPL=avx256 ${lsan_ARGS}"

build:ref:ubsan:
  <<: *build_definition
  variables:
    BUILD_DIR: "${BUILD_ROOT}/ref_ubsan"
    CMAKE_ARGS: "${ref_ARGS} ${ubsan_ARGS}"

build:x86_64:ubsan:
  <<: *build_definition
  variables:
    BUILD_DIR: "${BUILD_ROOT}/x86_64_ubsan"
    CMAKE_ARGS: "${x86_64_ARGS} -DHQC_X86_IMPL=avx256 ${ubsan_ARGS}"

# -------------------------------------------------------------------
# Test template
# -------------------------------------------------------------------
.test: &test_definition
  stage: test
  image: tiicrc/pqc-base:latest
  script:
    - cd "$BUILD_DIR"
    - ctest --output-on-failure -j$(nproc)
    - cd tests/api
    - |
      for exe in $KEM_EXES; do
        echo "Functional run: $exe ($ITER×)"
        for i in $(seq 1 $ITER); do
          ./$exe > /dev/null || exit 1
        done
      done

# -------------------------------------------------------------------
# Test jobs
# -------------------------------------------------------------------
test:ref:
  <<: *test_definition
  dependencies: ["build:ref"]
  variables:
    BUILD_DIR: "${BUILD_ROOT}/ref"
    KEM_EXES: "test_api_hqc_1 test_api_hqc_3 test_api_hqc_5"
    ITER: $REF_ITERATIONS

test:x86_64:
  <<: *test_definition
  dependencies: ["build:x86_64"]
  variables:
    BUILD_DIR: "${BUILD_ROOT}/x86_64"
    KEM_EXES: "test_api_hqc_1 test_api_hqc_3 test_api_hqc_5"
    ITER: $X86_64_ITERATIONS

# -------------------------------------------------------------------
# Clang-format check
# -------------------------------------------------------------------
.clang_format: &clang_format_definition
  stage: quality
  image: tiicrc/pqc-base:latest
  script:
    - cd "$BUILD_DIR"
    - cmake --build . --target check-format

clang_format:ref:
  <<: *clang_format_definition
  dependencies:
    - "build:ref"
  variables:
    BUILD_DIR: "${BUILD_ROOT}/ref"

clang_format:x86_64:
  <<: *clang_format_definition
  dependencies:
    - "build:x86_64"
  variables:
    BUILD_DIR: "${BUILD_ROOT}/x86_64"

# -------------------------------------------------------------------
# Cppcheck
# -------------------------------------------------------------------
.cppcheck: &cppcheck_definition
  stage: quality
  image: tiicrc/pqc-base:latest
  script:
    - cd "$BUILD_DIR"
    - cmake --build . --target cppcheck

cppcheck:ref:
  <<: *cppcheck_definition
  dependencies:
    - "build:ref"
  variables:
    BUILD_DIR: "${BUILD_ROOT}/ref"

cppcheck:x86_64:
  <<: *cppcheck_definition
  dependencies:
    - "build:x86_64"
  variables:
    BUILD_DIR: "${BUILD_ROOT}/x86_64"

# -------------------------------------------------------------------
# Valgrind memcheck
# -------------------------------------------------------------------
.memcheck: &memcheck_definition
  stage: quality
  image: tiicrc/pqc-base:latest
  script:
    - cd "$BUILD_DIR/tests/api"
    - |
      for exe in $KEM_EXES; do
        echo "Valgrind memcheck: $exe (100×)"
        for i in $(seq 1 100); do
          valgrind --leak-check=full --error-exitcode=1 ./$exe > /dev/null || exit 1
        done
      done

memcheck:ref:
  <<: *memcheck_definition
  dependencies:
    - "build:ref"
  variables:
    BUILD_DIR: "${BUILD_ROOT}/ref"

memcheck:x86_64:
  <<: *memcheck_definition
  dependencies:
    - "build:x86_64"
  variables:
    BUILD_DIR: "${BUILD_ROOT}/x86_64"

# -------------------------------------------------------------------
# Sanitizer quality (ctest)
# -------------------------------------------------------------------
.sanitize: &sanitize_definition
  stage: quality
  image: tiicrc/pqc-base:latest
  script:
    - cd "$BUILD_DIR"
    - ctest --output-on-failure -j$(nproc)

sanitizers:ref:asan:
  <<: *sanitize_definition
  dependencies:
    - "build:ref:asan"
  variables:
    BUILD_DIR: "${BUILD_ROOT}/ref_asan"

sanitizers:x86_64:asan:
  <<: *sanitize_definition
  dependencies:
    - "build:x86_64:asan"
  variables:
    BUILD_DIR: "${BUILD_ROOT}/x86_64_asan"

sanitizers:ref:msan:
  <<: *sanitize_definition
  dependencies:
    - "build:ref:msan"
  variables:
    BUILD_DIR: "${BUILD_ROOT}/ref_msan"
  script:
    - cd "$BUILD_DIR"
    - ctest --output-on-failure -j$(nproc) -E "test_kat_hqc_(1|3|5)|test_intermediates_values_hqc_(1|3|5)"

sanitizers:x86_64:msan:
  <<: *sanitize_definition
  dependencies:
    - "build:x86_64:msan"
  variables:
    BUILD_DIR: "${BUILD_ROOT}/x86_64_msan"
  script:
    - cd "$BUILD_DIR"
    - ctest --output-on-failure -j$(nproc) -E "test_kat_hqc_(1|3|5)|test_intermediates_values_hqc_(1|3|5)"

sanitizers:ref:lsan:
  <<: *sanitize_definition
  dependencies:
    - "build:ref:lsan"
  variables:
    BUILD_DIR: "${BUILD_ROOT}/ref_lsan"

sanitizers:x86_64:lsan:
  <<: *sanitize_definition
  dependencies:
    - "build:x86_64:lsan"
  variables:
    BUILD_DIR: "${BUILD_ROOT}/x86_64_lsan"

sanitizers:ref:ubsan:
  <<: *sanitize_definition
  dependencies:
    - "build:ref:ubsan"
  variables:
    BUILD_DIR: "${BUILD_ROOT}/ref_ubsan"

sanitizers:x86_64:ubsan:
  <<: *sanitize_definition
  dependencies:
    - "build:x86_64:ubsan"
  variables:
    BUILD_DIR: "${BUILD_ROOT}/x86_64_ubsan"